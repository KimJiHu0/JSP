<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- 이 mapper의 namespace를 mytest라고 지정한다. -->
<mapper namespace = "mytest">
	<!-- 
	원래는 resultType는 List여야하는게 아닌가?
	아니다. Mybatis에서는 sql에 집중할 수 있도록 나머지 작업들을 해주는데
	selectList의 경우 한 줄의(row) dto들을 list에 담아주어야한다.
	하지만 그 작업 역시 Mybaits가 해줄 것이라 resultType는 dto다.
	 -->
	<select id="selectList" resultType="dto">
		SELECT MYNO, MYNAME, MYTITLE, MYCONTENT, MYDATE FROM MYTEST
	</select>
	
	<!--
	이 mapper의 이름은 mytest이다.
	dao에서 mytest.selectOne을 호출했다 그럼 이 안에있는 sql문이 실행되어서
	결과값이 dao에 들어가 return.
	dao에서 전달해준 parameter값의 타입은 int타입이고, 결과값은 dto 이다.
	-->
	<select id="selectOne" parameterType="int" resultType="dto">
		SELECT MYNO, MYNAME, MYTITLE, MYCONTENT, MYDATE FROM MYTEST
		WHERE MYNO = #{myno}
	</select>
	
	<!--
	dao에서 넘겨주는 파라미터의 타입은 dto타입이고
	결과값은 resultType는 안써주면 기본값이 int형이기 때문에
	결과값이 int타입인 insert에는 작성해주지 않는다.
	-->
	<insert id="insert" parameterType="dto">
		INSERT INTO MYTEST
		VALUES( MYTESTSEQ.NEXTVAL, #{myname}, #{mytitle}, #{mycontent}, SYSDATE )
	</insert>
	
	<!-- 
	dao에서 넘겨준 값 파라미터를 dto로 받았다.
	결과값은 이미 int형이기 때문에 resultType는 작성하지 않는다.
	 -->
	<update id="update" parameterType="dto">
		UPDATE MYTEST SET MYTITLE = #{mytitle}, MYCONTENT = #{mycontent}
		WHERE MYNO = #{myno}
	</update>
	
	<!-- 
	dao에서 보내준 파라미터의 타입은 int타입이다.
	결과값은 갯수를 리턴하는 int타입이라 따로 작성해주지 않는다.
	
	 -->
	<delete id="delete" parameterType="int">
		DELETE FROM MYTEST WHERE MYNO = #{myno}
	</delete>
	
	<!-- 
	dao에서 보내준 파라미터의 타입이 int이기 때문에 parameterType : int
	delete문을 실행시켜줄건데 WHERE문에 담긴 값들이 모두 일치하면 실행시켜줄거다.
	for문을 돌려줄건데 mynos에 담긴 myno를 돌려주는데
	open과 close는 ( )를 써줄거고
	for문이 하나 돌때마다 ,를써줄거다.
	결과 : DELETE FROM MYTEST WHERE MYNO IN (1,2,3,4,5) 식으로
	 -->
	<delete id="muldel" parameterType="map">
		DELETE FROM MYTEST WHERE MYNO IN
		<foreach collection="mynos" item="myno" open="(" separator="," close=")">
			#{myno}
		</foreach>
	</delete>
</mapper>